{"version":3,"sources":["images/tarot cards/fandango.png","images/tarot cards/aquaporin.png","images/tarot cards/batman.png","images/tarot cards/brick1.png","images/tarot cards/glra1.png","images/tarot cards/rptor.png","images/tarot cards/slit_robo.png","images/tarot cards/sorcin.png","images/tarot cards/timeless.png","images/tarot cards/tmm.png","images/tarot cards/twitchin.png","images/tarot cards/vngf.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","pins","Map","FandangoImg","BatmanImg","TmmImg","TwitchinImg","AquaporinImg","Glra1Img","Brick1Img","TimelessImg","rptorImg","SlitRoboImg","SorcinImg","VngfImg","App","_useState","useState","_useState2","Object","slicedToArray","index","setIndex","_useState3","_useState4","score","setScore","currentQuestion","questions","react_default","a","createElement","className","onClick","length","question","answers","map","answer","key","type","scoreMap","set","get","submitAnswer","highScoreEntry","toConsumableArray","entries","reduce","e","ticket","Math","round","random","src","alt","getQuizAnswer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0mOAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0ZCkBlCC,SAAO,IAAIC,IAAI,CACnB,CAAC,UAAW,CAACC,MACb,CAAC,cAAe,CAACA,MACjB,CAAC,SAAU,CAACC,MACZ,CAAC,YAAa,CAACC,IAAQC,MACvB,CAAC,YAAa,CAACC,IAAcC,MAC7B,CAAC,gBAAiB,CAACC,IAAWC,MAC9B,CAAC,WAAY,CAACC,IAAUC,MACxB,CAAC,gBAAiB,CAACC,IAAWC,SAkEjBC,MA/Df,WAAe,IAAAC,EACaC,mBAAS,GADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAEaN,mBAAS,IAAIf,KAF1BsB,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAECE,EAFDF,EAAA,GA8BPG,EAAkBC,EAAUP,GAClC,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEE,QAAS,WA7BbX,EAAS,GACTI,EAAS,IAAIxB,MA+BT8B,UAAU,gBAJZ,eAQCX,EAAQO,EAAUM,OACjBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAKJ,EAAgBQ,UACrBN,EAAAC,EAAAC,cAAA,UACGJ,EAAgBS,QAAQC,IAAI,SAACC,GAAD,OAC3BT,EAAAC,EAAAC,cAAA,MAAIQ,IAAKD,EAAOE,MACdX,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAtCV,SAACK,GACpBhB,EAASD,EAAQ,GACjB,IAAMoB,EAAW,IAAIvC,IAAIuB,GACzBgB,EAASC,IAAIJ,EAAQG,EAASE,IAAIL,GAAUG,EAASE,IAAIL,GAAU,EAAI,GACvEZ,EAASe,GAkC0BG,CAAaN,EAAOE,QACxCF,EAAOA,aAOlBT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAxCc,WACpB,GAAIN,EAAMkB,IAAI,eACZ,OAAO1C,EAAK0C,IAAI,eAAe,GAE/B,IAAME,EAAiB1B,OAAA2B,EAAA,EAAA3B,CAAIM,EAAMsB,WAAWC,OAAO,SAAClB,EAAGmB,GAAJ,OACjDA,EAAE,GAAKnB,EAAE,GAAKmB,EAAInB,IAClB,GACIoB,EAASjD,EAAK0C,IAAIE,GACtB5C,EAAK0C,IAAIE,GAAgBX,OAAS,EAAIiB,KAAKC,MAAMD,KAAKE,UAAY,GAEpE,OAAOxB,EAAAC,EAAAC,cAAA,OAAKuB,IAAKJ,EAAQK,IAAI,cA8BnBC,OCzEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e68dcfce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fandango.456dadc0.png\";","module.exports = __webpack_public_path__ + \"static/media/aquaporin.347897f8.png\";","module.exports = __webpack_public_path__ + \"static/media/batman.0c7b6cdc.png\";","module.exports = __webpack_public_path__ + \"static/media/brick1.41c8fe19.png\";","module.exports = __webpack_public_path__ + \"static/media/glra1.da54f7a0.png\";","module.exports = __webpack_public_path__ + \"static/media/rptor.2acbf8cc.png\";","module.exports = __webpack_public_path__ + \"static/media/slit_robo.1bf8f618.png\";","module.exports = __webpack_public_path__ + \"static/media/sorcin.7ac0490b.png\";","module.exports = __webpack_public_path__ + \"static/media/timeless.505d32b6.png\";","module.exports = __webpack_public_path__ + \"static/media/tmm.61266e4a.png\";","module.exports = __webpack_public_path__ + \"static/media/twitchin.b000c595.png\";","module.exports = __webpack_public_path__ + \"static/media/vngf.ed24f483.png\";","import React, { useState } from \"react\";\nimport questions from \"./questions.json\";\n\nimport AquaporinImg from \"./images/tarot cards/aquaporin.png\";\nimport BatmanImg from \"./images/tarot cards/batman.png\";\nimport Brick1Img from \"./images/tarot cards/brick1.png\";\nimport FandangoImg from \"./images/tarot cards/fandango.png\";\nimport Glra1Img from \"./images/tarot cards/glra1.png\";\nimport rptorImg from \"./images/tarot cards/rptor.png\";\nimport SlitRoboImg from \"./images/tarot cards/slit_robo.png\";\nimport SorcinImg from \"./images/tarot cards/sorcin.png\";\nimport TimelessImg from \"./images/tarot cards/timeless.png\";\nimport TmmImg from \"./images/tarot cards/tmm.png\";\nimport TwitchinImg from \"./images/tarot cards/twitchin.png\";\nimport VngfImg from \"./images/tarot cards/vngf.png\";\n\nimport \"./App.css\";\n\nconst pins = new Map([\n  [\"sausage\", [FandangoImg]],\n  [\"megasausage\", [FandangoImg]],\n  [\"batman\", [BatmanImg]],\n  [\"extravert\", [TmmImg, TwitchinImg]],\n  [\"introvert\", [AquaporinImg, Glra1Img]],\n  [\"conscientious\", [Brick1Img, TimelessImg]],\n  [\"openness\", [rptorImg, SlitRoboImg]],\n  [\"agreeableness\", [SorcinImg, VngfImg]],\n]);\n\nfunction App() {\n  const [index, setIndex] = useState(0);\n  const [score, setScore] = useState(new Map());\n\n  const reset = () => {\n    setIndex(0);\n    setScore(new Map());\n  };\n\n  const submitAnswer = (answer) => {\n    setIndex(index + 1);\n    const scoreMap = new Map(score);\n    scoreMap.set(answer, scoreMap.get(answer) ? scoreMap.get(answer) + 1 : 1);\n    setScore(scoreMap);\n  };\n\n  const getQuizAnswer = () => {\n    if (score.get(\"megasausage\")) {\n      return pins.get(\"megasausage\")[0];\n    } else {\n      const highScoreEntry = [...score.entries()].reduce((a, e) =>\n        e[1] > a[1] ? e : a\n      )[0];\n      const ticket = pins.get(highScoreEntry)[\n        pins.get(highScoreEntry).length > 1 ? Math.round(Math.random()) : 0\n      ];\n      return <img src={ticket} alt=\"Your card\"></img>;\n    }\n  };\n\n  const currentQuestion = questions[index];\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() => {\n          reset();\n        }}\n        className=\"reset-button\"\n      >\n        Start again\n      </button>\n      {index < questions.length ? (\n        <div className=\"Question\">\n          <h2>{currentQuestion.question}</h2>\n          <ul>\n            {currentQuestion.answers.map((answer) => (\n              <li key={answer.type}>\n                <button onClick={() => submitAnswer(answer.type)}>\n                  {answer.answer}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div>\n          <div>{getQuizAnswer()}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}